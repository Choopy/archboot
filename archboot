#!/bin/bash
__appname__="archboot"
__version__="v2.8.5"
__branch__="master"
__author__="@grm34"
__license__="Apache v2.0 License"

_archboot_banner() {
    echo -e """${red}
      _             _     _                 _
     / \   _ __  __| |__ | |__   ___   ___ | |_
    / _ \ | '__/ __| '_ \| '_ \ / _ \ / _ \| __|
   / ___ \| | | (__| | | | |_) | (_) | (_) | |_
  /_/   \_\_|  \___|_| |_|_.__/ \___/ \___/ \__|${green}${__version__}
${blue}
 Welcome in archboot, a script made with love by ${__author__}
${nc}
Arch Linux is a light and fast distribution whose concept
is to remain  as simple  as possible. In the same purpose
this  script  performs  minimalist  installation, it only
installs the  required  packages, in order  to  give free
choice  to the  user. Pretty simple, it just prompts  for
language, hostname, username, which disk to use, required
partitions size  and  if  you wish  to install  a desktop
environment. According to the chosen one  and in order to
get complete support, additional packages may be required
For more  information, take a look  at the  archboot wiki
"""
}

#                      ARCHBOOT SYSTEM MANAGEMENT
# ============================================================================
# Here we defined all required variables and functions to manage archboot.
# Variables are pretty simple such as define needed url and colors.
# Functions are used to display install steps, notes, errors or to do some
# actions like cleanup after fatal error, execute cmd in chrooted environment,
# select an option, ask some information to the user or to get install logs.
# ============================================================================

# Github url: ${_url} for sources and ${_gh_pages} for images
_url="https://raw.githubusercontent.com/grm34/archboot/${__branch__}"
_gh_pages="https://raw.githubusercontent.com/grm34/archboot/gh-pages"

# Shell colors
red="\e[1;31m"; green="\e[1;32m"; yellow="\e[1;33m"
blue="\e[1;34m"; cyan="\e[1;36m"; nc="\e[0m"

# Display install steps
_info() {
    echo -e "${yellow}\n==> ${cyan}${1}...${nc}"
    sleep 2s
}

# Display some notes
_note() {
    echo -e "${red}\nNote: ${blue}${1}${nc}"
}

# DL show progress bar only
_wget() {
    wget ${1} -q --show-progress
}

# Execute action in chrooted environment
_chroot() {
    arch-chroot /mnt /bin/bash <<EOF
    ${1}
EOF
}

# Set logfile
_logs() {
    _info "Setting archboot log"
    datetime=$(date '+%d-%m-%Y')
    log="${__appname__}-${__version__}_${datetime}.log"
}

# Set system clock
_clock() {
    _info "Setting system clock"
    timedatectl set-ntp true
    timedatectl set-timezone ${timezone}
    hwclock --systohc
}

# Check and return command status
_check() {
    "$@"
    local status=$?
    if [[ ${status} -ne 0 ]]; then
        _error "with ${1}"
    fi
    return ${status}
}

# Cleanup: delete sources - umount partitions - exit
_cleanup() {
    echo -e "\nCleaning up archboot..."
    for source in *; do
        if [[ ${source} =~ ^(base|bootloader|desktop|display|\
firmware|mirrorlist|mounting|partition|user|vga|desktop_apps|\
display_apps|system_apps|vga_apps|00-keyboard|language|\
timezone|xprofile|background.png|Grub2-themes)$ ]]; then
            rm -rf ${source}
        fi
    done
    df | grep -q /mnt
    if [[ $? -eq 1 ]]; then
        umount -R /mnt
    fi
    _note "you must reboot to prevent unreconized system changes"
    sleep 2
    exit 1
}

# Cleanup on keyboard interrupt
trap _cleanup 1 2 3 6

# Reboot with 10s timeout
_reboot() {
    for d in $(seq 10 -1 1); do
        echo -ne "\r\033[K${green}System will reboot in ${d}s...${nc}"
        sleep 1
    done
    reboot
}

# Display error and cleanup
_error() {
    echo -e "${red}Error: ${yellow}${1} - Please try again!${nc}\n"
    _cleanup
}

# Select an option
_select() {
    count=0
    echo -ne "${yellow}\n==> "
    for entry in ${@}; do
        echo -ne "${red}[$((++count))] ${green}${entry} ${nc}"
    done
    lenth=${@}
    number=$((${#*} * 4))
    count=$((${#lenth} + ${number} + 1))
    echo -ne "${yellow}\n==> "
    _end
}

# Ask confirmation (Yes/No)
_confirm() {
    count=$((${#1} + 6))
    until [[ ${confirm} =~ ^(y|n|Y|N)$ ]]; do
        echo -ne "${yellow}\n==> ${green}${1} ${red}[y/n]${yellow}\n==> "
        _end
        read -r confirm
    done
}

# Ask some information
_prompt() {
    lenth=${@}
    count=${#lenth}
    echo -ne "\n${yellow}==> ${green}${1} ${red}${2}"
    echo -ne "${yellow}\n==> "
    _end
}

# Display end of _select(), _confirm() and _prompt() functions
_end() {
    for char in $(seq ${count}); do
        echo -ne "-"
    done
    echo -ne "\n==> ${nc}"
}

#                        ARCHBOOT SYSTEM PROCESS
# ============================================================================
# Here we check internet connection before downloading and importing sources.
# Sources are sorted by type: applications and scripts [src/apps & src/arch]
# Once done we could ask for user variables and stored them to run install.
# In case of desktop environment, we import additional sources and we
# scan for 3D VGA controller(s) to define appropriate drivers.
# ============================================================================

# Display archboot banner
_archboot_banner

# Check Internet Connection
_info "Check Internet Connection"
ping -c 1 archlinux.org >/dev/null 2>&1
if [[ $? -eq 0 ]]; then
    _note "Congratulations, you are connected to Internet!"
else
    _error "you are not connected to Internet. Ethernet seems not plugged in!"
fi

# Download base sources
_confirm "Start downloading sources from github?"
case ${confirm} in
    y|Y)
        _info "Downloading base sources"
        _wget ${_url}/src/arch/base            # to install Base system
        _wget ${_url}/src/arch/bootloader      # to install Grub2 bootloader
        _wget ${_url}/src/arch/firmware        # to set partitions settings
        _wget ${_url}/src/arch/mirrorlist      # to get mirrorlist & timezone
        _wget ${_url}/src/arch/mounting        # to mount partitions & swap
        _wget ${_url}/src/arch/partition       # to create table & partitions
        _wget ${_url}/src/arch/user            # to get user variables
        _wget ${_url}/src/apps/system_apps     # to get system apps
        _wget ${_url}/conf/language            # to get language code
        _wget ${_url}/conf/timezone            # to get region code
        ;;
    *)
        exit
        ;;
esac
unset confirm

# Import base sources
_info "Importing base sources"
source ./base; source ./bootloader; source ./firmware; source ./mirrorlist
source ./mounting; source ./partition; source ./user; source ./system_apps

# Get required variables [src/arch/user]
_ask_user_variables

# If Desktop Environment
if [[ ! -z ${desktop+x} ]]; then

    # Download desktop sources
    _info "Downloading desktop sources"
    _wget ${_url}/src/arch/vga             # to scan/install VGA Controller
    _wget ${_url}/src/arch/desktop         # to install Desktop Environment
    _wget ${_url}/src/arch/display         # to install Display Manager
    _wget ${_url}/src/apps/vga_apps        # to get VGA apps
    _wget ${_url}/src/apps/desktop_apps    # to get Desktop apps
    _wget ${_url}/src/apps/display_apps    # to get Display Manager apps

    # Import desktop sources
    _info "Importing desktop sources"
    source ./vga; source ./desktop; source ./display
    source ./vga_apps; source ./desktop_apps; source ./display_apps

    # Scan VGA Controller and set appropriate driver [src/arch/vga]
    _scan_vga_controller
fi

# Prepare the system
_firmware; _mirrorlist; _timezone; _clock; _logs

# Manage partitions
_note "WARNING! Enter NO only if partitions properly created and formated"
_confirm "Do you wish to install Arch Linux on a dedicated disk?"
case ${confirm} in
    y|Y)
        _partition
        ;;
    *)
        _custom_partition
        ;;
esac
unset confirm

# Mount partitions
_mount_partitions

_note "system is ready to rumble! Partitions mounted & swap activated!"

#                     ARCHBOOT SYSTEM INSTALLATION
# ============================================================================
# At this point system is ready, partitions are created, properly mounted and
# user variables stored. We can start Arch Linux installation.
# First step is to install base system [src/arch/base] and 2nd to install Grub
# bootloader [src/arch/bootloader]. We use <tee> to get logs of those steps.
# In case of desktop environment we install VGA Drivers and Display Manager.
# If system won't start desktop environment after reboot, check the logs and
# open an issue on GitHub. Logs are availables in /var/log/archboot.
# ============================================================================

_confirm "Do you wish to install Arch Linux now?"
case ${confirm} in
    y|Y)

        # Install Arch Linux base system
        (_base; _bootloader) 2>&1 | tee -a ${log}

        # Install desktop environment
        if [[ ! -z ${desktop+x} ]]; then
            (_install_vga_controller; _install_desktop_environment; \
            _display_manager; _desktop_settings) 2>&1 | tee -a ${log}
        fi

        # User rights
        if [[ ! -z ${power+x} ]]; then
            (_user_power) 2>&1 | tee -a ${log}
        fi

        # Logfile path
        _info "Setting logfile path"
        mkdir /mnt/var/log/archboot
        cp "${log}" /mnt/var/log/archboot/

        # Success notes
        _note "installation successful! // \
${__appname__} ${__version__} by ${__author__} under ${__license__}"
        ;;

    *)
        # Install aborted
        _error "aborted by user!"
        ;;
esac
unset confirm

#                       ARCHBOOT SYSTEM REBOOT
# ============================================================================
# And here we go! We could now cleanup sources, umount all partitions and
# reboot the computer to restart on our fresh Arch Linux installation.
# Telegram chat: t.me/archboot - Have fun, take care and give a star!
# ============================================================================

_confirm "Do you want to reboot your computer now?"
case ${confirm} in
    y|Y)
        umount -R /mnt
        _reboot
        ;;
    *)
        _cleanup
        ;;
esac

# archboot by grm34 under Apache v2.0 License.
# ============================================================================
