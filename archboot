#!/bin/bash
set > old_vars.log

APPNAME="archboot"
VERSION="v2.9.6"
BRANCH="dev"
AUTHOR="grm34"
LICENSE="Apache License 2.0"

_archboot_banner() {
    echo -e """
${RED}
      _             _     _                 _
     / \   _ __  __| |__ | |__   ___   ___ | |_
    / _ \ | '__/ __| '_ \| '_ \ / _ \ / _ \| __|
   / ___ \| | | (__| | | | |_) | (_) | (_) | |_
  /_/   \_\_|  \___|_| |_|_.__/ \___/ \___/ \__|${GREEN}${VERSION}
${BLUE}
 Arch Linux Installer @ a script made with love by ${AUTHOR}
${NC}
Arch Linux is a light and fast distribution whose concept
is to remain  as simple  as possible. In the same purpose
this  script  performs  minimalist  installation, it only
installs the  required  packages  in order  to  give free
choice  to the  user.  Pretty  simple, it  just  asks for
language, hostname, username, the drive  to use, required
partitions size  and  if  you wish  to install  a desktop
environment. According to the chosen one  and in order to
get complete support, additional packages may be required
For more  information, take a look  at the  ${APPNAME} wiki
"""
}

#                      SHARED VARIABLES & FUNCTIONS
# ============================================================================
# Here we define all required variables and functions to manage archboot.
# Variables are pretty simple such as define needed urls and colors.
# Functions are used to display install steps, notes, errors or to do some
# actions like to cleanup after fatal error, execute cmd in chrooted env,
# select an option, ask some information to the user or to get install logs.
# ============================================================================

# Github url for sources and images
URL="https://raw.githubusercontent.com/${AUTHOR}/${APPNAME}/${BRANCH}"
GHPAGES="https://raw.githubusercontent.com/${AUTHOR}/${APPNAME}/gh-pages"

# Shell colors
RED="\e[1;31m"; GREEN="\e[1;32m"; YELLOW="\e[1;33m"
BLUE="\e[1;34m"; CYAN="\e[1;36m"; NC="\e[0m"

# Display install steps
_info() {
    echo -e "${YELLOW}\n==> ${CYAN}${1}...${NC}"
    sleep 1
}

# Display some notes
_note() {
    echo -e "${RED}\nNote: ${BLUE}${1}${NC}"
}

# Delete sources and umount partitions
_cleanup() {
    echo -e "\nCleaning up ${APPNAME}..."
    SRC=(base bootloader desktop display firmware gpu_driver mirrorlist \
mounting partitioning user desktop_apps display_apps gpu_apps system_apps \
00-keyboard.conf language loader.conf reflector timezone xprofile \
background.png Grub2-themes archboot* *_vars.log)
    for SOURCE in "${SRC[@]}"; do
        if [[ -f ${SOURCE} ]]; then
            rm -rfv ${SOURCE}
        fi
    done
    if mount | grep /mnt; then
        umount -Rfv /mnt
    fi
}

# Display error and cleanup
_error() {
    echo -e "\n${RED}Error: ${YELLOW}${*}${NC}"
    sleep 1; _cleanup
    _note "you must reboot to prevent unreconized system changes.\n"
    exit 1 && exit 1
}

# Cleanup on keyboard interrupt
trap '_error "keyboard interrupt!"' 1 2 3 6

# Reboot with 10s timeout
_reboot() {
    for ((SECOND=10; SECOND>=1; SECOND--)); do
        echo -ne "\r\033[K${GREEN}System will reboot in ${SECOND}s...${NC}"
        sleep 1
    done
    reboot; exit 0
}

# Check and return command status
_check() {
    "${@}"
    local STATUS=$?
    if [[ ${STATUS} -ne 0 ]]; then
        _error "${@}"
    fi
    return ${STATUS}
}

# Set system clock
_clock() {
    _info "Setting system clock"
    _check timedatectl set-timezone ${TIMEZONE}
    _check timedatectl set-ntp true
    _check ntpd -qg
    _check hwclock --systohc
    timedatectl show
}

# Set logfile
_logs() {
    _info "Setting ${APPNAME} logs"
    DATETIME=$(_check date '+%d-%m-%Y_%Hh%M')
    INSTALL_LOG="${APPNAME}-${VERSION}_${DATETIME}.log"
    INPUTS_LOG="${USER_NAME}_${DATETIME}.log"
    _archboot_banner > ${INSTALL_LOG}
    _archboot_banner > ${INPUTS_LOG}
}

# Download show progress bar only
_wget() {
    wget ${1} -q --show-progress
}

# Execute action in chrooted environment
_chroot() {
    arch-chroot /mnt /bin/bash <<EOF
    ${1}
EOF
}

# Install packages and return status
_install() {
    _check pacman --noconfirm --needed -S "${@}"
}

# Select an option
_select() {
    COUNT=0
    echo -ne "${YELLOW}\n==> "
    for ENTRY in "${@}"; do
        echo -ne "${RED}[$((++COUNT))] ${GREEN}${ENTRY} ${NC}"
    done
    LENTH=${*}
    NUMBER=$((${#*} * 4))
    COUNT=$((${#LENTH} + NUMBER + 1))
    echo -ne "${YELLOW}\n==> "
    _end
}

# Ask confirmation (Yes/No)
_confirm() {
    unset CONFIRM
    COUNT=$((${#1} + 6))
    until [[ ${CONFIRM} =~ ^(y|n|Y|N|yes|no|Yes|No|YES|NO)$ ]]; do
        echo -ne "${YELLOW}\n==> ${GREEN}${1} ${RED}[y/n]${YELLOW}\n==> "
        _end
        read -r CONFIRM
    done
}

# Ask some information
_prompt() {
    LENTH=${*}
    COUNT=${#LENTH}
    echo -ne "\n${YELLOW}==> ${GREEN}${1} ${RED}${2}"
    echo -ne "${YELLOW}\n==> "
    _end
}

# Display the end of select, confirm and prompt functions
_end() {
    for ((CHAR=1; CHAR<=COUNT; CHAR++)); do
        echo -ne "-"
    done
    echo -ne "\n==> ${NC}"
}

#             START SCRIPT - IMPORT SOURCES - GET USER VARIABLES
# ============================================================================
# Here we check internet connection before downloading and importing sources.
# Sources are sorted by type: applications <src/apps> & scripts <src/arch>
# Then we can ask for user variables and store them to run install.
# In case of desktop environment, we import additional sources and we
# scan for 3D GPU controller to define appropriate drivers.
# Kernel mode setting support: in this case GPU Driver will not be installed.
# ============================================================================

# Display archboot banner
_archboot_banner

# Check Internet Connection
_info "Checking Internet connection"
INTERNET=$(ping -c 1 archlinux.org)
if [[ ${INTERNET} ]]; then
    _note "congratulations, you are connected to Internet!"
else
    _error "you are not connected to Internet!"
fi

# Download base sources
_confirm "Start downloading sources from github?"
case ${CONFIRM} in
    y|Y|yes|Yes|YES)
        _info "Downloading base sources"
        _wget ${URL}/src/arch/base            # to install base system
        _wget ${URL}/src/arch/bootloader      # to install bootloader
        _wget ${URL}/src/arch/firmware        # to get firmware
        _wget ${URL}/src/arch/mirrorlist      # to get mirrorlist & timezone
        _wget ${URL}/src/arch/mounting        # to mount partitions & swap
        _wget ${URL}/src/arch/partitioning    # to define/create partitions
        _wget ${URL}/src/arch/user            # to get user variables
        _wget ${URL}/src/apps/system_apps     # to get system apps
        _wget ${URL}/conf/language            # to get language code
        _wget ${URL}/conf/loader.conf         # to get systemd-boot loader
        _wget ${URL}/conf/reflector           # to get reflector service
        _wget ${URL}/conf/timezone            # to get timezone
        ;;
    *)
        exit 1
        ;;
esac

# Import base sources
_info "Importing base sources"
_check source ./base; _check source ./bootloader
_check source ./firmware; _check source ./mirrorlist
_check source ./mounting; _check source ./partitioning
_check source ./user; _check source ./system_apps

# Get required variables
_get_user_variables

# Desktop Environment
if [[ -n ${DESKTOP+x} ]]; then

    # Download desktop sources
    _info "Downloading desktop sources"
    _wget ${URL}/src/arch/desktop         # to install Desktop Environment
    _wget ${URL}/src/arch/display         # to install Display Manager
    _wget ${URL}/src/arch/gpu_driver      # to scan/install GPU Driver
    _wget ${URL}/src/apps/desktop_apps    # to get Desktop apps
    _wget ${URL}/src/apps/display_apps    # to get Display Manager apps
    _wget ${URL}/src/apps/gpu_apps        # to get GPU Driver apps

    # Import desktop sources
    _info "Importing desktop sources"
    _check source ./desktop; _check source ./display
    _check source ./gpu_driver; _check source ./desktop_apps
    _check source ./display_apps; _check source ./gpu_apps

    # GPU Driver or kernel mode setting?
    _note "enter NO to use kernel mode setting."
    _confirm "Do you wish to install GPU Driver?"
    case ${CONFIRM} in
        y|Y|yes|Yes|YES)
            _get_gpu_driver
            ;;
    esac
fi

#               PREPARE THE SYSTEM - FORMAT - MOUNT PARTITIONS
# ============================================================================
# Here we first update the system to ensure we are on latest version.
# Here we get user firmware to set partitions settings and other options.
# Then we get fastest mirrors, timezone, clock, logs and we properly define
# them. We could now run partitioning, activate SWAP and mount the partitions.
# ============================================================================

# Prepare the system
_info "Updating system"
_check pacman --noconfirm --needed -Sy ntp
_firmware; _mirrorlist; _timezone; _clock; _logs

# Partitioning
_note "enter NO to activate custom partitioning."
_confirm "Do you wish to install Arch Linux on a dedicated drive?"
case ${CONFIRM} in
    y|Y|yes|Yes|YES)
        _default_partitioning_scheme
        ;;
    *)
        _custom_partitioning_scheme
        ;;
esac

# Mount
_mount_partitions
_note "system is ready to rumble! Partitions mounted & swap activated."

#                         ARCH LINUX INSTALLATION
# ============================================================================
# At this point system is ready, partitions are created, properly mounted and
# user variables stored. We can start Arch Linux installation.
# First step is to install base system and second to install bootloader.
# In case of desktop environment we install GPU Drivers and Display Manager.
# And we enable user rights and install an AUR Helper (optional).
# We use <tee> to get full installation logs of those steps.
# If system won't start after reboot, check the logs and open an issue.
# Take a look at /var/log/archboot for full installation logs.
# ============================================================================

_confirm "Do you wish to install Arch Linux now?"
case ${CONFIRM} in
    y|Y|yes|Yes|YES)

        # Install Arch Linux base system
        (_install_base; _install_bootloader) 2>&1 | tee -a ${INSTALL_LOG}

        # Install GPU Driver
        if [[ -n ${GPU_DRIVER+x} ]]; then
            (_install_gpu_driver) 2>&1 | tee -a ${INSTALL_LOG}
        fi

        # Install desktop env or window manager
        if [[ -n ${DESKTOP+x} ]]; then
            (_install_desktop_environment) 2>&1 | tee -a ${INSTALL_LOG}

            # Install display manager
            case ${DESKTOP} in GNOME|KDE|MATE|XFCE4|LXDE|LXQT|DEEPIN|BUDGIE|\
CINNAMON|ENLIGHTENMENT)
                (_install_display_manager) 2>&1 | tee -a ${INSTALL_LOG}
                ;;
            esac

            # DE/WM Settings
            (_configure_desktop_environment) 2>&1 | tee -a ${INSTALL_LOG}
        fi

        # User rights
        chown -R ${USER_NAME}:users /home/${USER_NAME}
        if [[ -n ${POWER+x} ]]; then
            (_enable_user_rights) 2>&1 | tee -a ${INSTALL_LOG}
        fi

        # AUR Helper
        if [[ -n ${AUR_HELPER+x} ]]; then
            (_install_AUR_helper) 2>&1 | tee -a ${INSTALL_LOG}
        fi

        # Get user inputs logs
        _info "Adding user inputs to logs"
        set | grep -v \
"A=\|B=\|ROOTPASSWD=\|USERPASSWD=\|RED=\|GREEN=\|YELLOW=\|BLUE=\|CYAN=\|NC=" \
> new_vars.log
        _check diff old_vars.log new_vars.log | grep "^>" >> ${INPUTS_LOG}
        _check sed -i -e "s/> _='Adding user inputs to logs'//g" ${INPUTS_LOG}

        # Move logs to system
        _info "Moving logs to system"
        _check mkdir -v /mnt/var/log/${APPNAME}
        _check mv -v ${INSTALL_LOG} /mnt/var/log/${APPNAME}/
        _check mv -v ${INPUTS_LOG} /mnt/var/log/${APPNAME}/

        # Success notes
        _note "Arch Linux installation successful!"
        ;;
    *)
        # Install aborted
        _error "installation aborted by user!"
        ;;
esac

#                CLEANUP SOURCES - UMOUNT PARTITIONS - REBOOT
# ============================================================================
# And here we go! We could now cleanup sources, umount all partitions and
# reboot the computer to restart on our fresh Arch Linux installation.
# Telegram chat: t.me/archboot - Have fun, take care and give a star!
# ============================================================================

_confirm "Do you wish to reboot your computer now?"
case ${CONFIRM} in
    y|Y|yes|Yes|YES)
        _cleanup
        _reboot
        ;;
    *)
        _cleanup
        exit 0
        ;;
esac
_note "${APPNAME} ${VERSION} by ${AUTHOR} under ${LICENSE}"

# archboot by grm34 under Apache License 2.0
# ============================================================================
