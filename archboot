#!/bin/bash
__appname__="archboot"
__version__="v2.7.6"
__branch__="dev"
__author__="@grm34"
__license__="Apache v2.0 License"

_archboot_banner() {
    echo -e """${red}
      _             _     _                 _
     / \   _ __  __| |__ | |__   ___   ___ | |_
    / _ \ | '__/ __| '_ \| '_ \ / _ \ / _ \| __|
   / ___ \| | | (__| | | | |_) | (_) | (_) | |_
  /_/   \_\_|  \___|_| |_|_.__/ \___/ \___/ \__|${green}${__version__}
${blue}
 Welcome in archboot, a script made with love by ${__author__}
${nc}
Arch Linux is a light and fast distribution whose concept
is to remain  as simple as possible.  In the same purpose
this script  performs  minimalist  installation,  it only
installs  the required  packages,  in order  to give free
choice to  the user.  Pretty simple,  it just  prompt for
hostname, username, password, which disk to use, required
partitions, language, timezone and if you wish to install
a desktop  environment.  According to the  chosen one and
in order to get  complete  support, additionals  packages
may be required."""
}

#
# GLOBAL FUNCTIONS
# ________________

# Function to display install steps
_info() {
    echo -e "${yellow}\n==> ${cyan}${1}...${nc}"
    sleep 2s
}

# Function to display some notes
_note() {
    echo -e "${red}\nNote: ${blue}${1}${nc}"
}

# Function to DL with progress bar only
_wget() {
    wget ${1} -q --show-progress
}

# Function to execute action in chrooted environment
_chroot() {
    arch-chroot /mnt /bin/bash <<EOF
    ${1}
EOF
}

# Function to set logfile
_logs() {
    _info "Setting archboot log"
    datetime=$(date '+%d-%m-%Y')
    log="archboot_${datetime}.log"
}

# Function to set system clock
_clock() {
    _info "Setting system clock"
    timedatectl set-ntp true
    timedatectl set-timezone ${timezone}
    hwclock --systohc
}

# Function to check error
_check() {
    "$@"
    local status=$?
    if [[ ${status} -ne 0 ]]; then
        _error "with ${1}"
    fi
    return ${status}
}

# Function to reboot with 10s timeout
_reboot() {
    for d in $(seq 10 -1 1); do
        echo -ne "\r\033[K${green}System will reboot in ${d}s...${nc}"
        sleep 1
    done
    reboot
}

# Function to display error
_error() {
    echo -e "${red}Error: ${yellow}${1} ==> Please try again.${nc}\n"
    _reboot
}

# Function to display end
_end() {
    for char in $(seq ${count}); do
        echo -ne "-"
    done
    echo -ne "\n==> ${nc}"
}

# Function to ask confirmation (Yes/No)
_confirm() {
    count=$((${#1} + 6))
    until [[ ${confirm} =~ ^[yn]$ ]]; do
        echo -ne "${yellow}\n==> ${green}${1} ${red}[y/n]${yellow}\n==> "
        _end
        read -r confirm
    done
}

# Function to select an option
_select() {
    count=0
    echo -ne "${yellow}\n==> "
    for entry in ${@}; do
        echo -ne "${green}${entry} ${red}[$((++count))] ${nc}"
    done
    lenth=${@}
    number=$((${#*} * 4))
    count=$((${#lenth} + ${number} + 1))
    echo -ne "${yellow}\n==> "
    _end
}

# Function to ask some infos
_prompt() {
    lenth=${@}
    count=${#lenth}
    echo -ne "\n${yellow}==> ${green}${1} ${red}${2}"
    echo -ne "${yellow}\n==> "
    _end
}

#
# GLOBAL VARIABLES
# ________________

# Github url
_url="https://raw.githubusercontent.com/grm34/archboot/${__branch__}"

# Bash Colors
red="\e[1;31m"; green="\e[1;32m"; yellow="\e[1;33m"
blue="\e[1;34m"; cyan="\e[1;36m"; nc="\e[0m"

#
# START ARCHBOOT
# ______________

_archboot_banner

# Check Internet Connection
_info "Check Internet Connection"
ping -c 1 archlinux.org >/dev/null 2>&1
if [[ $? -eq 0 ]]; then
    _note "OK, you are connected to Internet."
else
    _error "you are not connected to Internet. Ethernet seems not plugged in."
fi

# Download base sources
_confirm "Start downloading sources from github?"
if [[ ${confirm} == "y" ]]; then
    _info "Downloading base sources"
    _wget ${_url}/src/arch/base            # to install ArchLinux Base system
    _wget ${_url}/src/arch/bootloader      # to install Grub2 bootloader
    _wget ${_url}/src/arch/firmware        # to define options of partitions
    _wget ${_url}/src/arch/mounting        # to mount partitions & swap
    _wget ${_url}/src/arch/partition       # to create table & partitions
    _wget ${_url}/src/arch/user            # to ask user infos
    _wget ${_url}/src/apps/system_apps     # to load system apps
    _wget ${_url}/conf/language            # to get language code
    _wget ${_url}/conf/timezone            # to get region code
else
    exit
fi
unset confirm

# Import base sources
_info "Importing base sources"
source ./base; source ./bootloader; source ./firmware
source ./mounting; source ./partition; source ./user; source ./system_apps

# Ask for user informations
_ask_user_informations

# If Desktop Environment
if [[ ! -z ${desktop+x} ]]; then

    # Download desktop sources
    _info "Downloading desktop sources"
    _wget ${_url}/src/arch/vga             # to scan video card
    _wget ${_url}/src/arch/desktop         # to install Desktop Environment
    _wget ${_url}/src/arch/display         # to configure Display Manager
    _wget ${_url}/src/apps/desktop_apps    # to load desktop apps
    _wget ${_url}/src/apps/vga_apps        # to load VGA apps

    # Import desktop sources
    _info "Importing desktop sources"
    source ./vga; source ./desktop; source ./display
    source ./desktop_apps; source ./vga_apps

    # Scan VGA Controller and select appropriate driver
    _scan_vga_controller
fi

# Prepare the system
_clock; _logs; _firmware; _partition; _mounting
_note "system ready! Partitions mounted & swap activated."

# Install ArchLinux
_confirm "Do you wish to install ArchLinux now?"
if [[ ${confirm} == "y" ]]; then
    (_base; _bootloader) 2>&1 | tee -a ${log}

    # Install desktop environment
    if [[ ! -z ${desktop+x} ]]; then
        (_install_DE; _display_manager; _DE_settings) 2>&1 | tee -a ${log}
    fi

    # Logfile path
    _info "Setting logfile path"
    mkdir /mnt/var/log/archboot
    cp "${log}" /mnt/var/log/archboot/

    # Success notes
    _note "Installation successful! \
    ${__appname__} ${__version__} by ${__author__} under ${__license__}"

else
    _error "aborted by user!"
fi
unset confirm

#
# SYSTEM REBOOT
# _____________

_confirm "Do you want to reboot your computer now?"
if [[ ${confirm} == "y" ]]; then
    umount -R /mnt
    reboot
else
    exit
fi
