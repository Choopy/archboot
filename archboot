#!/bin/bash
__appname__="archboot"
__version__="v2.7.5"
__branch__="dev"
__author__="grm34"
__license__="Apache v2.0 License"

_banner() {
    echo -e "${red}" >&2
    echo -e "    _             _     _                 _   " >&2
    echo -e "   / \   _ __  __| |__ | |__   ___   ___ | |_ " >&2
    echo -e "  / _ \ | '__/ __| '_ \| '_ \ / _ \ / _ \| __|" >&2
    echo -e " / ___ \| | | (__| | | | |_) | (_) | (_) | |_ " >&2
    echo -e "/_/   \_\_|  \___|_| |_|_.__/ \___/ \___/ \__|_${green}${__version__}\n" >&2
    echo -e "${blue}Welcome in archboot, a script made with love by ${__author__}${nc}\n" >&2
    echo -e "Arch Linux is a light and fast distribution whose concept" >&2
    echo -e "is to remain as simple as possible. In the same purpose this" >&2
    echo -e "script performs minimalist installation, it only installs the" >&2
    echo -e "required packages, in order to give free choice to the user." >&2
    echo -e "Pretty simple, it just prompt for hostname,username, password," >&2
    echo -e "which disk to use, required partitions, language, timezone and" >&2
    echo -e "if you wish to install a desktop environment. According to the" >&2
    echo -e "chosen one and in order to get complete support, additionals" >&2
    echo -e "packages may be required." >&2
}

#
# Global functions
#

# Function to DL with progress bar but without output
_wget() {
    wget ${1} -q --show-progress
}

# Function to display install steps
_info() {
    echo -e "${yellow}\n==> ${cyan}${1}...${nc}"
    sleep 2s
}

# Function to display some notes
_note() {
    echo -e "${red}\nNote: ${blue}${1}${nc}" >&2
}

# Function to execute actions in chrooted environment
_chroot() {
    arch-chroot /mnt /bin/bash <<EOF
    ${1}
EOF
}

# Function to set logfile
_logs() {
    _info "Setting archboot log"
    datetime=$(date '+%d-%m-%Y')
    logfile="archboot_${datetime}.log"
}

# Function to set system clock
_clock() {
    _info "Setting system clock"
    timedatectl set-ntp true
    timedatectl set-timezone ${timezone}
    hwclock --systohc
}

# Function to display errors
_error() {
    echo -e "${red}\n\nError: ${yellow}${1}${nc}\n" >&2
    for d in $(seq 10 -1 1)
    do
        echo -ne "\r\033[K${green}System will reboot in ${d}s...${nc}" && sleep 1
    done
    echo; reboot
}

# Function to ask confirmation (Yes/No)
_confirm() {
    until [[ ${confirm} == "y" || ${confirm} == "n" ]]
    do
        echo -e "${yellow}\n==> ${green}${1} ${red}[y/n]${nc}" >&2
        echo -e "${yellow}==> -------------------------------------------------------${nc}" >&2
        echo -ne "${yellow}==> ${nc}" >&2
        read -r confirm
    done
}

# Function to ask some infos
_prompt() {
    echo -e "${yellow}" >&2
    echo -e "==> ${green}${1} ${red}${2} ${green}${3} ${red}${4} ${green}${5} ${red}${6} ${green}${7} ${red}${8} ${green}${9} ${red}${10} ${green}${11} ${red}${12}${nc}" >&2
    if [[ ! -z ${13+x} ]]
    then
        echo -e "${yellow}==> ${green}${13} ${red}${14} ${green}${15} ${red}${16} ${green}${17} ${red}${18} ${green}${19} ${red}${20}${nc}" >&2
    fi
    echo -e "${yellow}==> -------------------------------------------------------${nc}" >&2
    echo -ne "${yellow}==> ${nc}" >&2
}

#
# Global variables
#

# Github url
_url="https://raw.githubusercontent.com/grm34/archboot/${__branch__}"

# Bash Colors
red="\e[1;31m"; green="\e[1;32m"; yellow="\e[1;33m"
blue="\e[1;34m"; cyan="\e[1;36m"; nc="\e[0m"

#
# Start Archboot
#

# Display banner
_banner

# Check Internet Connection
_info "Check Internet Connection"
ping -c 1 archlinux.org >/dev/null 2>&1
if [[ $? == 0 ]]
then
    _note "OK, you are connected to Internet."
else
    _error "you are not connected to Internet. Please check if ethernet is plugged in."
fi

# Download base sources
_confirm "Start downloading sources from github?"
if [[ ${confirm} == "y" ]]
then
    _info "Downloading sources"
    _wget ${_url}/src/arch/base            # to install ArchLinux Base system
    _wget ${_url}/src/arch/bootloader      # to install Grub2 bootloader
    _wget ${_url}/src/arch/firmware        # to define options of partitions
    _wget ${_url}/src/arch/mounting        # to mount partitions & swap
    _wget ${_url}/src/arch/partition       # to create table & partitions
    _wget ${_url}/src/arch/user            # to ask user infos
    _wget ${_url}/src/apps/system_apps     # to load system apps
    _wget ${_url}/conf/language            # to get language code
    _wget ${_url}/conf/timezone            # to get region code
else
    echo; exit
fi
unset confirm

# Import base sources
_info "Importing sources"
source ./base; source ./bootloader; source ./firmware
source ./mounting; source ./partition; source ./user; source ./system_apps

# Prepare the system
_user_infos; _clock; _logs; _firmware; _partition

# Mount partitions & check for errors
_mounting
if [[ $? -eq 0 ]]
then
    _note "system ready! Partitions mounted & swap activated."

    #
    # Start the installation
    #

    # Install ArchLinux
    _confirm "Do you wish to install ArchLinux now?"
    if [[ ${confirm} == "y" ]]
    then
        (_base; _bootloader) 2>&1 | tee -a "${logfile}"
    else
        _error "aborted by user! Please try again."
    fi
    unset confirm

    # Install Desktop Environment
    if [[ ! -z ${desktop+x} ]]
    then

        # Download desktop sources
        _info "Downloading desktop sources"
        _wget ${_url}/src/arch/desktop         # to install Desktop Environment
        _wget ${_url}/src/arch/display         # to configure Display Manager
        _wget ${_url}/src/apps/desktop_apps    # to load desktop apps

        # Import desktop sources
        _info "Importing sources"
        source ./desktop; source ./display; source ./desktop_apps

        # Install desktop environment
        (_install_DE; _display_manager; _DE_settings) 2>&1 | tee -a "${logfile}"
    fi

    # Logfile path
    _info "Setting logfile path"
    mkdir /mnt/var/log/archboot
    cp "${logfile}" /mnt/var/log/archboot/

    # Success notes
    _note "Installation successful! ${__appname__} ${__version__} by ${__author__} under ${__license__}"

    # Reboot
    _confirm "Do you want to reboot your computer now?"
    if [[ ${confirm} == "y" ]]
    then
        umount -R /mnt; reboot
    else
        echo; exit
    fi

else
    _error "bad partitionning! Error occur during mount. Please try again."
fi
