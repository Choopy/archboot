#!/bin/bash
__appname__="archboot"
__version__="v1.5"
__author__="@grm34"
__date__="2017"
__license__="Apache v2.0 License"

##################
## GLOBAL STYLE ##
##################
red="\e[1;31m"
green="\e[1;32m"
yellow="\e[1;33m"
blue="\e[1;34m"
pink="\e[1;35m"
cyan="\e[1;36m"
nc="\e[0m"

_banner() {
    echo -e "$red\n\n       █▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█" >&2
    echo -e "       █$yellow     Archboot $__version__     $red█" >&2
    echo -e "       █$yellow ArchLinux Base System $red█" >&2
    echo -e "       █▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█\n"$nc >&2
}

_prompt() {
   echo -e $yellow"\n==> $green$1 $red$2"$nc >&2
   echo -e $yellow"==> ------------------------------------"$nc >&2
   echo -ne $yellow"==> "$nc >&2
}

_confirm() {
    echo -e $green"\n==> $red$1 $cyan[ENTER]"$nc >&2
    echo -ne $green"==> "$nc >&2
    read -s confirm
}

_info() {
    echo -e $cyan"\n==> $1..."$nc && sleep 2s
}

_note() {
    echo -e $cyan"\nNOTE:$nc $1" >&2
}

_error() {
    echo -e $red"\nERROR:$nc $1" >&2
    exit
}

_warning() {
    echo -e $yellow"\nWARNiNG:$nc $1" >&2
}

##############
## SETTiNGS ##
##############
_settings() {

    # Hostname
    until [[ ${#HOST_name} -ge 3 \
    && ${HOST_name} =~ ^[a-zA-Z0-9][-a-zA-Z0-9_]+$ ]]; do
    _prompt "Enter Hostname (ex: my-computer):"
    read HOST_name
    done

    # Password
    until [[ ${#i} -ge 8 && "$i" == *[a-z]* && "$i" == *[0-9]* ]]; do
    _note "password should be at least 8 chars long with one letter and one digit."
    _prompt "Enter password for root:"
    read -s i
    done
    _prompt "Confirm password for root:"
    read -s ROOT_passwd
    if [[ ${ROOT_passwd} != ${i} ]]; then
        _error "passwords does not match!"
    fi
}

##################
## ARCHBOOT LOG ##
##################
_logs() {
    _info "Setting archboot log"
    timedatectl set-timezone Europe/Paris
    datetime=`date '+%d-%m-%Y_%Hh%Mm%Ss'`
    logfile="install_arch_$datetime.log"
}

########################
## FiRMWARE DETECTiON ##
########################
_firmware() {
    _info "Firmware detection"
    efivar -l >/dev/null 2>&1
    if [[ $? -eq 0 ]]; then
        FIRMWARE="UEFI"
        part_table="GPT"
        part_code="g"
        part_type=""
        boot_filesystem="fat -F 32"
        _note "found UEFI firmware."
    else
        FIRMWARE="BIOS"
        part_table="MBR"
        part_code="o"
        part_type="p\n"
        boot_filesystem="ext2"
        _note "found BIOS firmware."
    fi
    part_order=(0 1 2 3 4)
}

#######################
## DiSK PARTiTiONiNG ##
#######################
_disk_part() {

    # MBR or GPT
    _confirm "$FIRMWARE detected! Listing disk"
    until [[ ${_disk} =~ ^(sd|hd)[a-z]{1}$ ]]; do
    fdisk -l
    _prompt "Enter disk to use (ex: sda):"
    read _disk
    done
    fdisk -l /dev/$_disk
    _warning "this will erase the entire drive!"
    _confirm "Creating $part_table partition table on /dev/$_disk"
    printf "$part_code\nw" | fdisk /dev/$_disk

    # BOOT on /dev/xxx1
    until [[ ${boot_size} =~ ^[0-9]{1,3}(M|G){1} \
    || ${boot_size,,} == "y" ]]; do
    _info "Partition size {M,G} => default: 512M"
    _prompt "Boot partition size => default: $red[y]"
    read boot_size
    done
    if [[ ${boot_size,,} == "y" ]]; then boot_size="512M"; fi
    _confirm "Creating boot /dev/$_disk${part_order[1]} [$boot_size]"
    printf "n\n$part_type\n\n+$boot_size\nw" | fdisk /dev/$_disk
    yes | mkfs.$boot_filesystem /dev/$_disk${part_order[1]}

    # SWAP on /dev/xxx2
    until [[ ${swap_size} =~ ^[0-9]{1,3}(M|G){1} \
    || ${swap_size,,} == "y" ]]; do
    _info "Partition size {M,G} => default: 2G"
    _prompt "Swap partition size => default: $red[y]"
    read swap_size
    done
    if [[ ${swap_size,,} == "y" ]]; then swap_size="2G"; fi
    _confirm "Creating Swap /dev/$_disk${part_order[2]} [$swap_size]"
    printf "n\n$part_type\n\n+$swap_size\nw" | fdisk /dev/$_disk
    yes | mkswap /dev/$_disk${part_order[2]}

    # SYSTEM on /dev/xxx3
    until [[ ${sys_size} =~ ^[0-9]{1,3}(G|T|P){1} \
    || ${sys_size,,} == "y" ]]; do
    _info "Partition size {G,T,P} => default: 25G"
    _prompt "System partition size => default: $red[y]"
    read sys_size
    done
    if [[ ${sys_size,,} == "y" ]]; then sys_size="25G"; fi
    _confirm "Creating System /dev/$_disk${part_order[3]} [$sys_size]"
    printf "n\n$part_type\n\n+$sys_size\nw" | fdisk /dev/$_disk
    yes | mkfs.ext4 /dev/$_disk${part_order[3]}

    # HOME on /dev/xxx4
    if [[ "$FIRMWARE" == "UEFI" ]]; then
        until [[ ${home_size} =~ ^[0-9]{1,3}(G|T|P){1} \
        || ${home_size,,} == "y" ]]; do
        _info "Partition size {G,T,P} => default: free space"
        _prompt "Home partition size => default: $red[y]"
        read home_size
        done
        if [[ ${home_size,,} == "y" ]]; then
            home_size=""
            part_size="free space"
        else
            home_size="+$home_size"
            part_size="$home_size"
        fi
        _confirm "Creating Home /dev/$_disk${part_order[4]} [$part_size]"
        printf "n\n\n\n$home_size\nw" | fdisk /dev/$_disk
    else
        _info "Home partition will use all free space"
        _confirm "Creating Home partition /dev/$_disk${part_order[4]}"
        printf "n\n$part_type\n\nw" | fdisk /dev/$_disk
    fi
    yes | mkfs.ext4 /dev/$_disk${part_order[4]}
}

#########################
## MOUNTiNG PARTiTiONS ##
#########################
_mount_part() {
    _confirm "Mounting partitions & activating swap"
    mount /dev/$_disk${part_order[3]} /mnt
    mkdir /mnt/{boot,home}
    if [[ "$FIRMWARE" == "UEFI" ]]; then
        mkdir -p /mnt/boot/efi/EFI
        mount -t vfat /dev/$_disk${part_order[1} /boot/efi
    else
        mount /dev/$_disk${part_order[1]} /mnt/boot
    fi
    swapon /dev/$_disk${part_order[2]}
    mount /dev/$_disk${part_order[4]} /mnt/home
}

#################
## BASE SYSTEM ##
#################
_install_base() {
    _info "Installing base system"
    yes '' | pacstrap /mnt base base-devel syslinux
    genfstab -U -p /mnt >> /mnt/etc/fstab
    arch-chroot /mnt /bin/bash <<EOF
    _info "Setting root password"
    echo "root:${ROOT_passwd}" | chpasswd
    _info "Setting hostname"
    echo $HOST_name > /etc/hostname
    _info "Setting timezone"
    ln -s /usr/share/zoneinfo/Europe/Paris /etc/localtime
    _info "Setting and generating locale"
    echo "fr_FR.UTF-8 UTF-8" >> /etc/locale.gen && locale-gen
    export LANG=fr_FR.UTF-8
    echo "LANG=fr_FR.UTF-8" > /etc/locale.conf
    _info "Setting keyboard"
    echo "KEYMAP=fr-pc" > /etc/vconsole.conf
    _info "Setting Linux environment"
    mkinitcpio -p linux
    _info "Installing network"
    pacman --noconfirm -S ntp networkmanager \
    wget git reflector wireless_tools wpa_supplicant
    systemctl enable NetworkManager.service
    if [[ "$part_table" == "GPT" ]]; then
        _info "Installing GPT compatibility"
        pacman --noconfirm -S gptfdisk
    fi
EOF
}

################
## BOOTLOADER ##
################
_bootloader() {
    _confirm "Base system ok! Creating $FIRMWARE Boot Loader?"
    if [[ "$FIRMWARE" == "UEFI" ]]; then
        arch-chroot /mnt /bin/bash <<EOF
        pacman --noconfirm -S dosfstools efibootmgr
        mkdir -p /boot/efi/EFI/syslinux
        cp -r /usr/lib/syslinux/efi64/* /boot/efi/EFI/syslinux
        mount -t efivarfs efivarfs /sys/firmware/efi/efivars
        efibootmgr -c -d /dev/$_disk${part_order[1]} -p Y -l \
        /boot/efi/EFI/syslinux/syslinux.efi -L "Syslinux"
        cp /usr/lib/syslinux/bios/vesamenu.c32 /boot/efi/EFI/syslinux/
EOF
    else
        arch-chroot /mnt /bin/bash <<EOF
        syslinux-install_update -iam
        cp /usr/lib/syslinux/bios/vesamenu.c32 /boot/syslinux/
EOF
    fi
}

#############
## iNSTALL ##
#############
_banner && _settings && _logs && _firmware && _disk_part && _mount_part
if [ $? -eq 0 ]; then
    _confirm "System ready! Do you wish to install ArchLinux?"
    (_install_base && _bootloader) 2>&1 | tee -a $logfile
    mkdir /mnt/var/log/archboot && cp $logfile /mnt/var/log/archboot/
    _note "Installation finished. No error reported, see logfile: /var/log/archboot/"
else
    _error "partitionning error!"
fi
_confirm "Done! $__appname__ $__version__ by $__author__ - $__license__"
umount -R /mnt && reboot
