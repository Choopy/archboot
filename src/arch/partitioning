#!/bin/bash

#                         PARTITIONING SCHEME
# ============================================================================
#
# DEFAULT PARTITIONING:
#   In this mode a dedicated drive is required. We format it and create the
#   right partition table according to firmware. Then we ask for partitions
#   sizes to properly sort, create and format them.
#
# CUSTOM PARTITIONING:
#   In this mode we just ask for partitions drive ID. Partitions could
#   be on differents drives but requires you to properly create and
#   format them before running archboot.
#
#   < UEFI boot requires EFI partition type (ef00) with FAT32 filesystem >
#
# PARTITIONING SCHEME:
#
#   SYSTEM_PARTITION......: /mnt            (required)
#   BOOT_PARTITION........: /mnt/boot       (required)
#   SWAP_PARTITION........: no mountpoint   (optional)
#   HOME_PARTITION........: /mnt/home       (optional)
#
# We use <partprobe> to inform changes to system and to check if drive
# exists. We also add a <sleep 2s> to prevent unreconized system changes.
#
# All steps are described in the official documentation:
#
#   https://wiki.archlinux.org/index.php/Partitioning
# ============================================================================

_default_partitioning_scheme() {

    # Select drive to use
    _info "Listing availables drives"
    lsblk | grep "NAME\|disk" | sed "s/MOUNTPOINT//g"
    _prompt "Enter drive to use:" "(e.g., sda, nvme0n1)"
    read -r DRIVE

    # Check if valid drive
    CHECK=$(partprobe -d -s /dev/${DRIVE})

    # Otherwise ask again
    until [[ ${CHECK} ]]; do
        _info "Listing availables drives"
        lsblk | grep "NAME\|disk" | sed "s/MOUNTPOINT//g"
        _prompt "Enter valid drive:" "(e.g., sda, hda, nvme0n1)"
        read -r DRIVE
        CHECK=$(partprobe -d -s /dev/${DRIVE})
    done

    # Return selected drive
    export DRIVE="/dev/${DRIVE}"

    # Create MBR or GPT Table
    _info "Arch Linux will be installed on ${DRIVE}"
    lsblk ${DRIVE}
    _note "WARNING! all data will be lost!"
    _confirm "Format ${DRIVE} and create ${PART_TABLE} partition table?"
    case ${CONFIRM} in
        y|Y|yes|Yes|YES)
            if mount | grep ${DRIVE}; then
                _error "${DRIVE} is mounted!"
            fi
            dd if=/dev/zero of=${DRIVE} bs=512 count=1 status=progress
            wipefs -fa ${DRIVE}
            printf ${PART_CODE}"\nw" | fdisk ${DRIVE}
            ;;
        *)
            _error "installation aborted by user!"
            ;;
    esac

    # Get optional partitions and set partitions list
    _get_user_partitions

    # Create list to store partitions sizes
    PART_SIZES=(BOOT_SIZE SYSTEM_SIZE)
    SIZES=("512M" "25G")
    if [[ ${PARTITION[*]} =~ "SWAP_PARTITION" ]]; then
        PART_SIZES+=(SWAP_SIZE)
        SIZES+=("2G")
    fi
    if [[ ${PARTITION[*]} =~ "HOME_PARTITION" ]]; then
        PART_SIZES+=(HOME_SIZE)
        SIZES+=("100G")
    fi
    INDEX=0

    # Get partitions sizes
    for PART in "${PART_SIZES[@]}"; do
        PART_NAME=${PART//_SIZE/}

        # Free space for home?
        if [[ ${PART} == "HOME_SIZE" ]]; then
            _confirm "Do you wish to use free space for ${PART_NAME,,}?"
            case ${CONFIRM} in
                y|Y|yes|Yes|YES)
                    PARTITION_SIZE="free space"
                    ;;
            esac
        fi

        # Otherwise ask partitions sizes
        if [[ ${PARTITION_SIZE} != "free space" ]]; then
            _note "partition size {M,G,T,P} (e.g., ${SIZES[${INDEX}]})"
            _prompt "Enter ${PART_NAME,,} partition size:"
            read -r PARTITION_SIZE

            # Check if valid size and otherwise ask again
            until [[ ${PARTITION_SIZE} \
=~ ^[1-9]{1}[[0-9]{0,2}(M|G|T|P){1}$ ]]; do
                _note "partition size {M,G,T,P} (e.g., ${SIZES[${INDEX}]})"
                _prompt "Enter valid ${PART_NAME,,} partition size:"
                read -r PARTITION_SIZE
            done
        fi

        # Return partitions sizes
        export ${PART}="${PARTITION_SIZE}"
        INDEX=${INDEX}+1
    done

    # Set partition order
    if [[ ${DRIVE} =~ "/dev/nvme0n" ]]; then
        ORDER=(p1 p2 p3 p4)
    else
        ORDER=(1 2 3 4)
    fi

    # Create list to assign partitions sizes
    SIZES=("${BOOT_SIZE}" "${SYSTEM_SIZE}")
    if [[ ${PARTITION[*]} =~ "SWAP_PARTITION" ]]; then
        SIZES+=("${SWAP_SIZE}")
    fi
    if [[ ${PARTITION[*]} =~ "HOME_PARTITION" ]]; then
        SIZES+=("${HOME_SIZE}")
    fi
    INDEX=0

    # Create and format partitions
    for PART in "${PARTITION[@]}"; do
        PART_NAME=${PART//_PARTITION/}

        # Create partitions
        _info "Creating ${PART_NAME,,} partition (${SIZES[${INDEX}]})"
        if [[ ${PART} == "HOME_PARTITION" \
&& ${HOME_SIZE} == "free space" ]]; then
            printf "n\n${PART_TYPE}\n\n\nw" | fdisk ${DRIVE}
        else
            printf \
"n\n${PART_TYPE}\n\n+${SIZES[${INDEX}]}\nw" | fdisk ${DRIVE}
        fi

        # Set EFI partition type for boot (UEFI firmware only)
        if [[ ${PART} == "BOOT_PARTITION" && ${FIRMWARE} == "UEFI" ]]; then
            _info "Setting EFI partiton type on ${DRIVE}${ORDER[${INDEX}]}"
            printf "t\n1\nef00\nw" | gdisk ${DRIVE}
        fi

        # Format partitions
        _info "Formating ${PART_NAME,,} partition (${SIZES[${INDEX}]})"
        if [[ ${PART} == "BOOT_PARTITION" ]]; then
            yes | _check mkfs.${BOOT_FILESYSTEM} ${DRIVE}${ORDER[${INDEX}]}
        elif [[ ${PART} == "SWAP_PARTITION" ]]; then
            yes | _check mkswap ${DRIVE}${ORDER[${INDEX}]}
        else
            yes | _check mkfs.ext4 ${DRIVE}${ORDER[${INDEX}]}
        fi

        # Return partitions drive ID
        export ${PART}=${DRIVE}${ORDER[${INDEX}]}
        INDEX=${INDEX}+1
    done
}

_custom_partitioning_scheme() {

    # Get optional partitions and set partitions list
    _get_user_partitions

    # Get partitions drive ID
    _info "Listing availables drives"
    for PART in "${PARTITION[@]}"; do
        lsblk | grep "NAME\|disk\|part"
        PART_NAME=${PART//_PARTITION/}

        # Get drive ID
        _prompt "Enter ${PART_NAME,,} drive id:" "(e.g., sda2, nvme0n1p12)"
        read -r DRIVE_ID

        # Check if valid partition
        CHECK=$(partprobe -d -s /dev/${DRIVE_ID})

        # Otherwise ask again
        until [[ ${CHECK} ]]; do
            _info "Listing availables drives"
            lsblk | grep "NAME\|disk\|part"
            _prompt "Enter valid ${PART_NAME,,} drive id:" "(e.g., sda1)"
            read -r DRIVE_ID
            CHECK=$(partprobe -d -s /dev/${DRIVE_ID})
        done

        # Return partitions drive ID
        export ${PART}="/dev/${DRIVE_ID}"
    done

    # Set and return boot drive
    if [[ ${BOOT_PARTITION} =~ "/dev/nvme0n" ]]; then
        export DRIVE=${BOOT_PARTITION%p*}
    else
        export DRIVE=${BOOT_PARTITION//[0-9]}
    fi
}

_get_user_partitions() {

    # Set required and optional partitions
    PARTITION=(BOOT_PARTITION SYSTEM_PARTITION)
    OPTIONAL=(SWAP_PARTITION HOME_PARTITION)

    # Get optional partitions
    for PART in "${OPTIONAL[@]}"; do
        PART_NAME=${PART//_PARTITION/}
        _confirm "Do you wish to create ${PART_NAME,,} partition?"
        case ${CONFIRM} in
            y|Y|yes|Yes|YES)
                PARTITION+=("${PART}")
                ;;
        esac
    done

    # Return partitions list
    export PARTITION
}

# archboot by grm34 under Apache License 2.0
# ============================================================================
