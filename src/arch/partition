#!/bin/bash

#                         PARTITIONING SCHEME
# ============================================================================
# Here we listing existing drive and partitions to select wich one to use.
# Then we format it and we creating required partitions.
# The DRIVE variable is required by bootloader (in case of BIOS firmware).
# The PARTITION variables are required by mounting (BOOT_PARTITION, etc).
#
#     Recommended partitions:
#
#       SYSTEM_PARTITION......: /mnt
#       BOOT_PARTITION........: /mnt/boot
#       SWAP_PARTITION........: no mountpoint
#       HOME_PARTITION........: /mnt/home
#
#     Required partitions:
#
#       SYSTEM_PARTITION......: /mnt
#       BOOT_PARTITION........: /mnt/boot
#
# We use <partprobe> to inform system changes (and to check if drive exists)
# and we add a <sleep 2s> to prevent unreconized system changes.
# Since v2.8.1 custom partitioning is available, only drive id will be
# asked to the user (requires properly created and formated partitions).
# All steps are described in the official documentation:
# https://wiki.archlinux.org/index.php/Partitioning
# ============================================================================

_default_partitioning_scheme() {

    _info "Listing drives and partitions"
    echo && fdisk

    # Select drive to use
    _prompt "Enter drive to use:" "(e.g., sda, nvme0n1)"
    read -r DRIVE

    # Check if valid drive
    CHECK=$(partprobe -d -s /dev/${DRIVE})

    # Otherwise ask again
    until [[ ${DRIVE} ]]; do
        fdisk -l
        _prompt "Enter valid drive:" "(e.g., sda, hda, nvme0n1)"
        read -r DRIVE
    done
    export DRIVE="/dev/${DRIVE}"

    # Set partition order
    if [[ ${DRIVE} =~ "/dev/nvme0n" ]]; then
        export PART_ORDER=(0 p1 p2 p3 p4)
    else
        export PART_ORDER=(0 1 2 3 4)
    fi

    # Create MBR or GPT Table
    _info "Formatting ${DRIVE} drive"
    fdisk -l ${DRIVE}
    _note "WARNING: this will erase the entire drive!"
    _confirm "Setting ${PART_TABLE} partition table on ${DRIVE}"
    case ${CONFIRM} in
        y|Y|yes|Yes|YES)
            wipefs -fa ${DRIVE}
            printf ${PART_CODE}"\nw" | fdisk ${DRIVE}
            partprobe ${DRIVE}
            ;;
        *)
            _error "installation aborted by user!"
            ;;
    esac
    unset CONFIRM

    # Get BOOT partition size
    until [[ ${BOOT_SIZE} =~ ^[0-9]{1,3}(M|G){1}+$ ]]; do
        _note "partition size {M,G} (e.g., 512M)"
        _prompt "Boot partition size:"
        read -r BOOT_SIZE
    done

    # Create BOOT partition
    _info "Creating boot partition (${BOOT_SIZE})"
    printf "n\n${PART_TYPE}\n\n+${BOOT_SIZE}\nw" | fdisk ${DRIVE}
    partprobe ${DRIVE} && sleep 2s
    yes | _check mkfs.${BOOT_FILESYSTEM} ${DRIVE}${PART_ORDER[1]}
    export BOOT_PARTITION=${DRIVE}${PART_ORDER[1]}

    # Get SWAP partition size
    until [[ ${SWAP_SIZE} =~ ^[0-9]{1,3}(M|G){1}+$ ]]; do
        _note "partition size {M,G} (e.g., 2G)"
        _prompt "Swap partition size:"
        read -r SWAP_SIZE
    done

    # Create SWAP partition
    _info "Creating swap partition (${SWAP_SIZE})"
    printf "n\n${PART_TYPE}\n\n+${SWAP_SIZE}\nw" | fdisk ${DRIVE}
    partprobe ${DRIVE} && sleep 2s
    yes | _check mkswap ${DRIVE}${PART_ORDER[2]}
    export SWAP_PARTITION=${DRIVE}${PART_ORDER[2]}

    # Get SYSTEM partiton size
    until [[ ${SYSTEM_SIZE} =~ ^[0-9]{1,3}(G|T|P){1}+$ ]]; do
        _note "partition size {G,T,P} (e.g., 25G)"
        _prompt "System partition size:"
        read -r SYSTEM_SIZE
    done

    # Create SYSTEM partition
    _info "Creating system partition (${SYSTEM_SIZE})"
    printf "n\n${PART_TYPE}\n\n+${SYSTEM_SIZE}\nw" | fdisk ${DRIVE}
    partprobe ${DRIVE} && sleep 2s
    yes | _check mkfs.ext4 ${DRIVE}${PART_ORDER[3]}
    export SYSTEM_PARTITION=${DRIVE}${PART_ORDER[3]}

    # Free space for HOME?
    if [[ ${FIRMWARE} == "UEFI" ]]; then
        _confirm "Do you wish to use free space for home?"
        case ${CONFIRM} in
            y|Y|yes|Yes|YES)
                FREE_SPACE="True"
                ;;
        esac
        unset CONFIRM
    fi

    # HOME partition
    if [[ ${FIRMWARE} == "BIOS" || -n ${FREE_SPACE+x} ]]; then

        # Create HOME partition
        _info "Creating home partition (free space)"
        printf "n\n${PART_TYPE}\n\nw" | fdisk ${DRIVE}
    else

        # Get HOME partiton size
        until [[ ${HOME_SIZE} =~ ^[0-9]{1,3}(G|T|P){1}+$ ]]; do
            _note "partition size {G,T,P} (e.g., 100G)"
            _prompt "Home partition size:"
            read -r HOME_SIZE
        done

        # Create HOME partition
        _info "Creating home partition (${HOME_SIZE})"
        printf "n\n\n\n+${HOME_SIZE}\nw" | fdisk ${DRIVE}
    fi
    partprobe ${DRIVE} && sleep 2s
    yes | _check mkfs.ext4 ${DRIVE}${PART_ORDER[4]}
    export HOME_PARTITION=${DRIVE}${PART_ORDER[4]}
}

_custom_partitioning_scheme() {

    # Required partitions
    PARTITION=(BOOT_PARTITION SYSTEM_PARTITION)

    # SWAP partition
    _confirm "Do you wish to use swap partition?"
    case ${CONFIRM} in
        y|Y|yes|Yes|YES)
            PARTITION+=(SWAP_PARTITION)
            ;;
    esac
    unset CONFIRM

    # HOME partition
    _confirm "Do you wish to use home partition?"
    case ${CONFIRM} in
        y|Y|yes|Yes|YES)
            PARTITION+=(HOME_PARTITION)
            ;;
    esac
    unset CONFIRM

    # Get partitions drive ID
    _info "Listing drive and partitions"
    for PART in "${PARTITION[@]}"; do
        echo && fdisk -l
        PART_NAME=${PART//_PARTITION/}
        _prompt "Enter ${PART_NAME,,} drive id:" "(e.g., sda2, nvme0n1p12)"
        read -r DRIVE_ID

        # Check if valid partition
        CHECK=$(partprobe -d -s /dev/${DRIVE_ID})

        # Otherwise ask again
        until [[ ${CHECK} ]]; do
            echo && sleep 2s && fdisk -l
            _prompt "Enter valid ${PART_NAME,,} drive id:" "(e.g., sda1)"
            read -r DRIVE_ID
            CHECK=$(partprobe -d -s /dev/${DRIVE_ID})
        done

        # Return drive id
        export ${PART}="/dev/${DRIVE_ID}"

        # Set boot drive
        if [[ ${BOOT_PARTITION} =~ "/dev/nvme0n" ]]; then
            export DRIVE=${BOOT_PARTITION%p*}
        else
            export DRIVE=${BOOT_PARTITION//[0-9]}
        fi
    done
}

# archboot by grm34 under Apache License 2.0
# ============================================================================
