#!/bin/bash

#                         PARTITIONING SCHEME
# ============================================================================
# Here we listing existing drive and partitions to select wich one to use.
# Then we format it and we creating required partitions.
# The DRIVE variable is required by bootloader (in case of BIOS firmware).
# The PARTITION variables are required by mounting (BOOT_PARTITION, etc).
#
#     Recommended partitions:
#
#       SYSTEM_PARTITION......: /mnt
#       BOOT_PARTITION........: /mnt/boot
#       SWAP_PARTITION........: no mountpoint
#       HOME_PARTITION........: /mnt/home
#
#     Required partitions:
#
#       SYSTEM_PARTITION......: /mnt
#       BOOT_PARTITION........: /mnt/boot
#
# We use <partprobe> to inform system changes (and to check if drive exists)
# and we add a <sleep 2s> to prevent unreconized system changes.
# Since v2.8.1 custom partitioning is available, only drive id will be
# asked to the user (requires properly created and formated partitions).
# All steps are described in the official documentation:
# https://wiki.archlinux.org/index.php/Partitioning
# ============================================================================

_default_partitioning_scheme() {

    _info "Listing drives and partitions"
    echo && fdisk -l

    # Select drive to use
    _prompt "Enter drive to use:" "(e.g., sda, nvme0n1)"
    read -r DRIVE

    # Check if valid drive
    CHECK=$(partprobe -d -s /dev/${DRIVE})

    # Otherwise ask again
    until [[ ${DRIVE} ]]; do
        fdisk -l
        _prompt "Enter valid drive:" "(e.g., sda, hda, nvme0n1)"
        read -r DRIVE
    done
    export DRIVE="/dev/${DRIVE}"

    # Create MBR or GPT Table
    _info "Formatting ${DRIVE} drive"
    fdisk -l ${DRIVE}
    _note "WARNING: all data will be lost!"
    _confirm "Setting ${PART_TABLE} partition table on ${DRIVE}"
    case ${CONFIRM} in
        y|Y|yes|Yes|YES)
            wipefs -fa ${DRIVE}
            printf ${PART_CODE}"\nw" | fdisk ${DRIVE}
            partprobe ${DRIVE}
            ;;
        *)
            _error "installation aborted by user!"
            ;;
    esac
    unset CONFIRM

    # Set required partitions sizes
    PART_SIZES=(BOOT_SIZE SWAP_SIZE SYSTEM_SIZE HOME_SIZE)
    SIZES=("512M" "2G" "25G" "100G")

    # Get partitions sizes
    for PART in "${PART_SIZES[@]}"; do
        PART_NAME=${PART//_SIZE/}

        # Free space for HOME?
        if [[ ${PART} == "HOME_PARTITION" && ${FIRMWARE} == "UEFI" ]]; then
            _confirm "Do you wish to use free space for home?"
            case ${CONFIRM} in
                y|Y|yes|Yes|YES)
                    FREE_SPACE="True"
                    PARTITION_SIZE="free space"
                    ;;
            esac
            unset CONFIRM
        fi

        # Ask partitions sizes
        if [[ ! ${FREE_SPACE} ]]; then
            _note "partition size {M,G,T,P} (e.g., ${SIZES[$PART]})"
            _prompt "Enter ${PART_NAME} partition size:"
            read -r PARTITION_SIZE

            # Check if valid size and otherwise ask again
            until [[ ${PARTITION_SIZE} =~ ^[0-9]{1,3}(M|G|T|P){1}+$ ]]; do
                _note "partition size {M,G,T,P} (e.g., ${SIZES[$PART]})"
                _prompt "Enter valid ${PART_NAME} partition size:"
                read -r PARTITION_SIZE
            done
        fi

        # Return partitions sizes
        export ${PART}=${PARTITION_SIZE}
    done
    unset PART

    # Set partition order
    if [[ ${DRIVE} =~ "/dev/nvme0n" ]]; then
        ORDER=(p1 p2 p3 p4)
    else
        ORDER=(1 2 3 4)
    fi

    # Set required partitions and sizes
    PARTITION=(BOOT_PARTITION SWAP_PARTITION SYSTEM_PARTITION HOME_PARTITION)
    SIZES=("${BOOT_SIZE}" "${SWAP_SIZE}" "${SYSTEM_SIZE}" "${HOME_SIZE}")

    # Manage partitions
    for PART in "${PARTITION[@]}"; do
        PART_NAME=${PART//_PARTITION/}

        # Create partitions
        _info "Creating ${PART_NAME} partition (${SIZES[${PART}]})"
        if [[ ${PART} == "HOME_PARTITION" ]]; then
            if [[ ${HOME_SIZE} == "free space" ]]; then
                printf "n\n${PART_TYPE}\n\nw" | fdisk ${DRIVE}
            else
                printf "n\n\n\n+${HOME_SIZE}\nw" | fdisk ${DRIVE}
            fi
        else
            printf "n\n${PART_TYPE}\n\n+${SIZES[${PART}]}\nw" | fdisk ${DRIVE}
        fi

        # Inform changes to system
        partprobe ${DRIVE} && sleep 2s

        # Format partitions
        if [[ ${PART} == "BOOT_PARTITION" ]]; then
            yes | _check mkfs.${BOOT_FILESYSTEM} ${DRIVE}${ORDER[${PART}]}
        elif [[ ${PART} == "SWAP_PARTITION" ]]; then
            yes | _check mkswap ${DRIVE}${ORDER[${PART}]}
        else
            yes | _check mkfs.ext4 ${DRIVE}${ORDER[${PART}]}
        fi

        # Return partitions
        export ${PART}=${DRIVE}${ORDER[${PART}]}
    done
}

_custom_partitioning_scheme() {

    # Set required and extended partitions
    PARTITION=(BOOT_PARTITION SYSTEM_PARTITION)
    EXTENDED=(SWAP_PARTITION HOME_PARTITION)

    # Get extended partitions
    for EXT in "${EXTENDED[@]}"; do
        EXT_NAME=${EXT//_PARTITION/}
        _confirm "Do you wish to create ${EXT_NAME,,} partition?"
        case ${CONFIRM} in
            y|Y|yes|Yes|YES)
                PARTITION+=("${EXT}")
                ;;
        esac
        unset CONFIRM
    done

    # Get partitions drive ID
    _info "Listing drives and partitions"
    for PART in "${PARTITION[@]}"; do
        echo && fdisk -l
        PART_NAME=${PART//_PARTITION/}
        _prompt "Enter ${PART_NAME,,} drive id:" "(e.g., sda2, nvme0n1p12)"
        read -r DRIVE_ID

        # Check if valid partition
        CHECK=$(partprobe -d -s /dev/${DRIVE_ID})

        # Otherwise ask again
        until [[ ${CHECK} ]]; do
            echo && sleep 2s && fdisk -l
            _prompt "Enter valid ${PART_NAME,,} drive id:" "(e.g., sda1)"
            read -r DRIVE_ID
            CHECK=$(partprobe -d -s /dev/${DRIVE_ID})
        done

        # Return drive id
        export ${PART}="/dev/${DRIVE_ID}"
    done

    # Set boot drive
    if [[ ${BOOT_PARTITION} =~ "/dev/nvme0n" ]]; then
        export DRIVE=${BOOT_PARTITION%p*}
    else
        export DRIVE=${BOOT_PARTITION//[0-9]}
    fi
}

# archboot by grm34 under Apache License 2.0
# ============================================================================
