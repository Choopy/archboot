#!/bin/bash

#                         PARTITIONING SCHEME
# ============================================================================
# Here we listing existing disk and partitions to select wich one to use,
# to format it and to create required partitions.
#
#     Required partitions:
#
#     SYSTEM......: /mnt
#     BOOT........: /mnt/boot
#     SWAP........: no mountpoint
#     HOME........: /mnt/home
#
# We use partprobe to inform system changes and
# add sleep 1s to prevent unreconized system changes.
# Since v2.8.1 custom partitioning is available, only mountpoints will be
# asked to the user. Requires properly created and formated partitions.
# All steps are described in the official documentation:
# https://wiki.archlinux.org/index.php/Partitioning
# ============================================================================

_default_partitioning_scheme() {

    _info "Listing disk and partitions"

    # Select disk to use
    until [[ ${_disk} =~ ^(sd|hd|nvme0n)[a-z0-9]{1}$ ]]; do
        fdisk -l
        _prompt "Enter disk to use:" "(e.g., sda, nvme0n1)"
        read -r _disk
    done

    # Define partition order
    if [[ ${_disk} =~ "nvme0n" ]]; then
        export part_order=(0 p1 p2 p3 p4)
    else
        export part_order=(0 1 2 3 4)
    fi

    # Create MBR or GPT Table
    fdisk -l /dev/${_disk}
    _note "WARNING! This will erase the entire drive"
    _confirm "Setting ${part_table} partition table on /dev/${_disk}?"
    case ${confirm} in
        y|Y|yes|Yes|YES)
            wipefs -fa /dev/${_disk}
            printf ${part_code}"\nw" | fdisk /dev/${_disk}
            partprobe /dev/${_disk}
            ;;
        *)
            _error "aborted by user!"
            ;;
    esac
    unset confirm

    # Get BOOT partition size
    until [[ ${boot_size} =~ ^[0-9]{1,3}(M|G){1}+$ ]]; do
        _note "partition size {M,G} (e.g., 512M)"
        _prompt "Boot partition size:"
        read -r boot_size
    done

    # Create BOOT partition
    _info "Creating boot partition (${boot_size})"
    printf "n\n${part_type}\n\n+${boot_size}\nw" | fdisk /dev/${_disk}
    partprobe /dev/${_disk} && sleep 1s
    yes | _check mkfs.${boot_filesystem} /dev/${_disk}${part_order[1]}

    # Get SWAP partition size
    until [[ ${swap_size} =~ ^[0-9]{1,3}(M|G){1}+$ ]]; do
        _note "partition size {M,G} (e.g., 2G)"
        _prompt "Swap partition size:"
        read -r swap_size
    done

    # Create SWAP partition
    _info "Creating swap partition (${swap_size})"
    printf "n\n${part_type}\n\n+${swap_size}\nw" | fdisk /dev/${_disk}
    partprobe /dev/${_disk} && sleep 1s
    yes | _check mkswap /dev/${_disk}${part_order[2]}

    # Get SYSTEM partiton size
    until [[ ${sys_size} =~ ^[0-9]{1,3}(G|T|P){1}+$ ]]; do
        _note "partition size {G,T,P} (e.g., 25G)"
        _prompt "System partition size:"
        read -r sys_size
    done

    # Create SYSTEM partition
    _info "Creating system partition (${sys_size})"
    printf "n\n${part_type}\n\n+${sys_size}\nw" | fdisk /dev/${_disk}
    partprobe /dev/${_disk} && sleep 1s
    yes | _check mkfs.ext4 /dev/${_disk}${part_order[3]}

    # HOME partition
    if [[ ${FIRMWARE} == "UEFI" ]]; then
        _confirm "Do you wish to use free space for home?"
        case ${confirm} in
            y|Y|yes|Yes|YES)

                # Create HOME partition
                _info "Creating home partition (free space)"
                printf "n\n${part_type}\n\nw" | fdisk /dev/${_disk}
                ;;
            *)
                # Get HOME partiton size
                until [[ ${home_size} =~ ^[0-9]{1,3}(G|T|P){1}+$ ]]; do
                    _note "partition size {G,T,P} (e.g., 100G)"
                    _prompt "Home partition size:"
                    read -r home_size
                done

                # Create HOME partition
                _info "Creating home partition (${home_size})"
                printf "n\n\n\n+${home_size}\nw" | fdisk /dev/${_disk}
                ;;
        esac
    else
        # Create HOME partition
        _info "Creating home partition (free space)"
        printf "n\n${part_type}\n\nw" | fdisk /dev/${_disk}
    fi
    partprobe /dev/${_disk} && sleep 1s
    yes | _check mkfs.ext4 /dev/${_disk}${part_order[4]}

    # Export required vars
    export _disk
    export _boot="/dev/${_disk}${part_order[1]}"
    export _swap="/dev/${_disk}${part_order[2]}"
    export _system="/dev/${_disk}${part_order[3]}"
    export _home="/dev/${_disk}${part_order[4]}"
}

_custom_partitioning_scheme() {

    _info "Listing disk and partitions"

    # Select boot
    until [[ ${_bt} =~ ^(sd|hd|nvme0n)[a-z0-9]{1,3}$ ]]; do
        fdisk -l
        _prompt "Enter boot mountpoint:" "(e.g., sda2, nvme0n1p2)"
        read -r _bt
    done

    # Select swap
    until [[ ${_swp} =~ ^(sd|hd|nvme0n)[a-z0-9]{1,3}$ ]]; do
        fdisk -l
        _prompt "Enter swap mountpoint:" "(e.g., sda3, nvme0n1p3)"
        read -r _swp
    done

    # Select system
    until [[ ${_sys} =~ ^(sd|hd|nvme0n)[a-z0-9]{1,3}$ ]]; do
        fdisk -l
        _prompt "Enter system mountpoint:" "(e.g., sda1, nvme0n1p1)"
        read -r _sys
    done

    # Select home
    until [[ ${_hm} =~ ^(sd|hd|nvme0n)[a-z0-9]{1,3}$ ]]; do
        fdisk -l
        _prompt "Enter home mountpoint:" "(e.g., sda4, nvme0n1p4)"
        read -r _hm
    done

    # Export required variables
    if [[ ${_bt} =~ "nvme0n" ]]; then
        export _disk=${_bt%p*}
    else
        export _disk=${_bt//[0-9]}
    fi
    export _boot="/dev/${_bt}"
    export _swap="/dev/${_swp}"
    export _system="/dev/${_sys}"
    export _home="/dev/${_hm}"
}

# archboot by grm34 under Apache License 2.0
# ============================================================================
