#!/bin/bash

_ask_user_informations() {

    # User Language
    until grep -Fxq "${language}" ./language; do
        _note "list of available language code is available on github"
        _prompt "Enter language code:" "(ex: fr_FR, en_US, de_DE)"
        read -r language
    done
    keymap_code=$(echo ${language} | cut -d'_' -f 1)

    # TimeZone
    until grep -Fxq "${timezone}" ./timezone; do
        _note "list of available time zone code is available on github"
        _prompt "Enter time zone code:" "(ex: Europe/Paris, Asia/Tokyo)"
        read -r timezone
    done

    # Hostname
    until [[ ${#HOST_name} -ge 3 \
    && ${HOST_name} =~ ^[a-zA-Z0-9][-a-zA-Z0-9_]+$ ]]; do
        _prompt "Enter hostname:" "(ex: my-favorite-computer)"
        read -r HOST_name
    done

    # Root Password
    until [[ ${#a} -ge 8 && "${a}" == *[a-z]* && "${a}" == *[0-9]* ]]; do
        _note \
"password should be at least 8 chars long with 1 letter and 1 digit"
        _prompt "Enter password for root:"
        read -rs a
    done
    echo

    # Confirm Root Password
    _prompt "Confirm password for root:"
    read -rs ROOT_passwd
    if [[ ${ROOT_passwd} != "${a}" ]]; then
        _error "passwords does not match!"
    fi
    echo

    # Username
    until [[ ${#USER_name} -ge 3 \
    && ${USER_name} =~ ^[a-zA-Z0-9][-a-zA-Z0-9_]+$ ]]; do
        _prompt "Enter username:" "(ex: johnny)"
        read -r USER_name
    done

    # User Password
    until [[ ${#b} -ge 8 && "${b}" == *[a-z]* && "${b}" == *[0-9]* ]]; do
        _note \
"password should be at least 8 chars long with 1 letter and 1 digit"
        _prompt "Enter password for user ${USER_name}:"
        read -rs b
    done
    echo

    # Confirm User Password
    _prompt "Confirm password for user ${USER_name}:"
    read -rs USER_passwd
    if [[ ${USER_passwd} != "${b}" ]]; then
        _error "passwords does not match!"
    fi
    echo

    # User Rights
    _confirm "Give all rights to user ${USER_name}?"
    case ${confirm} in y|Y|yes|Yes) export power="yes";; esac
    unset confirm

    # Multilib
    _confirm "Enable multilib for 32-bit support?"
    case ${confirm} in y|Y|yes|Yes) export multilib="yes";; esac
    unset confirm

    # AUR
    _confirm "Install yaourt to enable AUR support?"
    case ${confirm} in y|Y|yes|Yes) export aur="yes";; esac
    unset confirm

    # Desktop Environment
    _confirm "Do you wish to install desktop environment?"
    case ${confirm} in y|Y|yes|Yes)
        until [[ ${desk} =~ ^([1-9]|10)$ ]]; do
            _select "Gnome" "KDE" "MATE" "Xfce" \
"LXDE" "LXQt" "Deepin" "Budgie" "Cinnamon" "Enlightenment"
            read -r desk
        done
        desktop_choice=\
(none gnome kde mate xfce4 lxde lxqt deepin budgie cinnamon enlightenment)
        export desktop=${desktop_choice[${desk}]};;
    esac
    unset confirm

    # Display Manager
    if [[ ! -z ${desktop+x} ]]; then

        _confirm "Use custom display manager?"
        case ${confirm} in

            # Custom display manager
            y|Y|yes|Yes)
                until [[ ${disp} =~ ^([1-5])$ ]]; do
                    _select "Gdm" "LightDM" "Sddm" "Lxdm" "Xdm"
                    read -r disp
                done
                display_choice=(none gdm lightdm sddm lxdm xdm)
                export display_man=${display_choice[${desk}]}
                ;;

            # Default display manager
            *)
                case ${desktop} in
                    gnome) export display_man="gdm";;
                    kde) export display_man="sddm";;
                    deepin) export display_man="lightdm";;
                    *) export display_man="lxdm";;
                esac
                ;;
        esac
        unset confirm
    fi

    # Export required vars
    export language; export keymap_code; export timezone
    export HOST_name; export ROOT_passwd; export USER_name; export USER_passwd
}
